#include <SoftwareSerial.h>
#include "TimerOne.h"
#include <Wire.h>
#include <Servo.h>

Servo servo_motor; 


Servo servo_1; // Servo motor
String input = ""; // Variable to store Voice Input
const int numberOfwords = 3; // Maximum no of words in the Voice input,will be used as a array length

String words[numberOfwords]; // Arrary to store individual words from voice input

SoftwareSerial BlueT(0, 1); //TX, RX connections 

const byte MOTOR_A = 2;  // Encoder Motor Left Channel A 
const byte MOTOR_B = 3;  // Encoder Motor Right Channel A 
const float stepcount = 520;  // No of pulses per complete rotation of motor shaft
const float wheeldiameter = 70; // Wheel diameter in millimeters, change if different

volatile int counter_A = 0;
volatile int counter_B = 0;
int Distance ;
String Direction = "";


// Motor A
int in1 = 6;
int in2 = 7;

// Motor B
int in3 = 8;
int in4 = 9;
int counter = 0;

int lastIndex = 0;

void setup()
{
  Wire.begin();
  Serial.begin(9600);
   BlueT.begin(9600); 
     // Attach the Interrupts to their ISR's
  attachInterrupt(digitalPinToInterrupt (MOTOR_A), ISR_countA, RISING);  // Increase counter A when speed sensor pin goes High
  attachInterrupt(digitalPinToInterrupt (MOTOR_B), ISR_countB, RISING);  // Increase counter B when speed sensor pin goes High
  
  servo_motor.attach(10); //our servo pin

  servo_motor.write(90);
  delay(1000);
  
}


void loop() {
  while (BlueT.available()){  //Check if there is an available byte to read
  delay(100); //Delay added to make thing stable
  char c = BlueT.read(); //Conduct a serial read 
  input += c; //string-"forward", "reverse", "left" and "right" 
  }
input = input.substring(0, input.length() - 1);  
Serial.println(input);

  // put your main code here, to run repeatedly:
  for (int i = 0; i < input.length(); i++) {
        // Loop through each character and check for space between inputs
        if (input.substring(i, i+1) == " ") {
          // Grab the input from the last index up to the current position and store it
          words[counter] = input.substring(lastIndex, i);
          // Update the last position and add 1, so it starts from the next character
          lastIndex = i + 1;
          // Increase the position in the array that we store into
          counter++;
        }

        // If we're at the end of the string 
        if (i == input.length() - 1) {
          // Grab the last part of the string from the lastIndex to the end
          words[counter] = input.substring(lastIndex, input.length());
        }
      }

      input = "";
      counter = 0;
      lastIndex = 0;
Serial.println(words[0]);
Serial.println(words[1]);

 Distance = words[0].toInt();
 Direction = words[1];
  


if (Direction == "forward")
{
  
if (Distance == 0)
  {
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  }
  else 
  {
    MoveForward(CMtoSteps(Distance));    
  }
}
  else if (Direction == "reverse")
{
  
if (Distance == 0)
  {
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  }
  else 
  {
    MoveReverse(CMtoSteps(Distance));
  }
  }
  else if (Direction == "stop")
  {
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  }
  else if (Direction == "left")
  {
  if (Distance == 0)
  {
  SpinLeft(CMtoSteps(19)); 
  }
  else 
  {
  SpinLeft(CMtoSteps(Distance)); 
  }
  }
  
  else if (Direction == "right")
  {
  
  if (Distance == 0)
  {
  SpinRight(CMtoSteps(19)); 
  }
  else 
  {
  SpinRight(CMtoSteps(Distance));
  }
  }  
  input="";
  Distance = NULL;
  Direction = "";
  words[0] = "";
  words[1] = "";
  words[2] = "";
  words[3] = "";
  words[4] = "";
  }

// Interrupt Service Routines

// Motor A pulse count ISR

void ISR_countA()  
{
  counter_A++;  // increment Motor A counter value
} 

// Motor B pulse count ISR
void ISR_countB()  
{
  counter_B++;  // increment Motor B counter value
}


int CMtoSteps(float cm) 
{
  int result;  // Final calculation result
  float circumference = (wheeldiameter * 3.14) / 10; // Calculate wheel circumference in cm
  float cm_step = circumference / stepcount;  // CM per Step
  float f_result = cm / cm_step;  // Calculate result as a float
  result = (int) f_result; // Convert to an integer (note this is NOT rounded)  
  return result;  // End and return result
}

// Function to Move Forward
void MoveForward(int steps) 
{
   counter_A = 0;  //  reset counter A to zero
   counter_B = 0;  //  reset counter B to zero
   while (steps > counter_A || steps > counter_B) {
   // Set Motor A forward
   digitalWrite(in1, HIGH);
   digitalWrite(in2, LOW);

   // Set Motor B forward
   digitalWrite(in3, HIGH);
   digitalWrite(in4, LOW);
   }
  // Stop when done
   digitalWrite(in1, LOW);
   digitalWrite(in2, LOW);

   // Set Motor B forward
   digitalWrite(in3, LOW);
   digitalWrite(in4, LOW);
   counter_A = 0;  //  reset counter A to zero
   counter_B = 0;  //  reset counter B to zero 
  }

// Function to Move in Reverse
void MoveReverse(int steps) 
  {
   counter_A = 0;  //  reset counter A to zero
   counter_B = 0;  //  reset counter B to zero
   while (steps > counter_A || steps > counter_B) {
   // Set Motor A reverse
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  // Set Motor B reverse
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH); 
   }
     
  // Stop when done
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);

  // Set Motor B reverse
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  counter_A = 0;  //  reset counter A to zero
  counter_B = 0;  //  reset counter B to zero 

}

// Function to Spin Right
void SpinRight(int steps) 
{
  Serial.println("Entering Right Function");
   counter_A = 0;  //  reset counter A to zero
   counter_B = 0;  //  reset counter B to zero
   while (steps > counter_A || steps > counter_B){
   // Set Motor A reverse
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);

  // Set Motor B forward
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
   }
   
   
    
  // Stop when done
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);

  // Set Motor B reverse
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  
  counter_A = 0;  //  reset counter A to zero
  counter_B = 0;  //  reset counter B to zero 

}

// Function to Spin Left
void SpinLeft(int steps) 
{
   counter_A = 0;  //  reset counter A to zero
   counter_B = 0;  //  reset counter B to zero
   while (steps > counter_A || steps > counter_B) { 
   // Set Motor A forward
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);

  // Set Motor B reverse
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
   }
      
  // Stop when done
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);

  // Set Motor B reverse
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  counter_A = 0;  //  reset counter A to zero
  counter_B = 0;  //  reset counter B to zero 
}

